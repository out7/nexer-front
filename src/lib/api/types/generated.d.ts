/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
    "/api/v1.0/auth/tma": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Authorization via TMA
         * @description Authorizes the user and returns access tokens.
         */
        post: operations["AuthController_authUser"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1.0/auth/refresh": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Refresh tokens
         * @description This endpoint allows you to refresh the access token. Requires a valid refresh token.
         */
        post: operations["AuthController_refreshToken"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1.0/customer/me": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Получить данные пользователя
         * @description Этот эндпоинт доступен только для авторизованных пользователей. Возвращает данные пользователя.
         */
        get: operations["CustomerController_getProfile"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1.0/customer/trial": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["CustomerController_activateTrial"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
}
export type webhooks = Record<string, never>;
export interface components {
    schemas: {
        AuthDataDto: {
            /** @description Telegram initData */
            data: string;
        };
        AuthTokensDto: {
            /**
             * @description Access token (JWT) for authentication
             * @example eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...
             */
            accessToken: string;
            /**
             * @description Hashed refresh token (JWT) for renewing access tokens
             * @example eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...
             */
            refreshToken: string;
        };
        RefreshTokenDto: {
            /** @description refresh token */
            refreshToken: string;
        };
        CustomerSubscriptionResponseDto: {
            /** @description Internal subscription ID (UUID) */
            id: string;
            /**
             * @description Current subscription status
             * @example active
             * @enum {string}
             */
            status: "active" | "expired" | "none";
            /** @description Start date of the subscription (if active) */
            startDate: string | null;
            /** @description End date of the subscription (if active) */
            endDate: string | null;
            /**
             * @description How the subscription was created (e.g. paid, trial, bonus)
             * @example trial
             * @enum {string|null}
             */
            createdVia: "paid" | "bonus" | "trial" | null;
            /** @description Manual VPN subscription URL (e.g. vmess://...) */
            subscriptionUrl: Record<string, never> | null;
            /**
             * @description Whether the free trial was already activated
             * @example false
             */
            trialActivated: boolean;
            /** @description Timestamp when subscription was created */
            createdAt: string;
            /** @description Timestamp of last subscription update */
            updatedAt: string;
        };
        CustomerResponseDto: {
            /** @description Internal customer ID (UUID) */
            id: string;
            /** @description Telegram user ID (numeric) */
            telegramId: number;
            /** @description Telegram username (if available) */
            username: Record<string, never> | null;
            /** @description User language code, e.g. "en" or "ru" */
            language: string;
            /** @description ID of the referrer (if any) */
            referredById: Record<string, never> | null;
            /** @description Unclaimed bonus days from referrals or promotions */
            unclaimedBonusDays: number;
            /**
             * Format: date-time
             * @description Customer registration timestamp
             */
            createdAt: string;
            /**
             * Format: date-time
             * @description Last update timestamp of the customer record
             */
            updatedAt: string;
            /** @description Customer subscription info (if exists) */
            customerSubscription: components["schemas"]["CustomerSubscriptionResponseDto"] | null;
        };
    };
    responses: never;
    parameters: never;
    requestBodies: never;
    headers: never;
    pathItems: never;
}
export type $defs = Record<string, never>;
export interface operations {
    AuthController_authUser: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Request body for TMA authorization */
        requestBody: {
            content: {
                "application/json": components["schemas"]["AuthDataDto"];
            };
        };
        responses: {
            /** @description Tokens issued */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["AuthTokensDto"];
                };
            };
            /** @description Telegram initData is missing */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Invalid Telegram initData */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Failed to find or create user */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    AuthController_refreshToken: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Request body for token refresh */
        requestBody: {
            content: {
                "application/json": components["schemas"]["RefreshTokenDto"];
            };
        };
        responses: {
            /** @description Tokens refreshed */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["AuthTokensDto"];
                };
            };
            /** @description Invalid refresh token format */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Invalid or expired refresh token */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    CustomerController_getProfile: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Данные пользователя */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["CustomerResponseDto"];
                };
            };
            /** @description Неавторизованный доступ */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    CustomerController_activateTrial: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Trial activated */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["CustomerResponseDto"];
                };
            };
            /** @description Trial already used */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
}
