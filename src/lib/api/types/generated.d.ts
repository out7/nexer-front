/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
    "/api/v1.0/auth/tma": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Authorization via TMA
         * @description Authorizes the user and returns access tokens.
         */
        post: operations["AuthController_authUser"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1.0/auth/refresh": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Refresh tokens
         * @description This endpoint allows you to refresh the access token. Requires a valid refresh token.
         */
        post: operations["AuthController_refreshToken"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1.0/customer/me": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Получить данные пользователя
         * @description Этот эндпоинт доступен только для авторизованных пользователей. Возвращает данные пользователя.
         */
        get: operations["CustomerController_getProfile"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1.0/customer/trial": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["CustomerController_activateTrial"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1.0/activity": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get activity logs for customer */
        get: operations["ActivityLogController_list"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1.0/tariffs": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get available tariff plans
         * @description Returns a list of available tariff (subscription) plans with pricing in RUB and Telegram Stars, including discounts if available.
         */
        get: operations["TariffController_getAllTariffs"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1.0/referrals/me": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get my referrals
         * @description Returns a list of customers invited by the current authenticated user
         */
        get: operations["ReferralController_getMyReferrals"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1.0/invoice/tariff/{code}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Generate a payment link for a tariff using Telegram Stars */
        get: operations["InvoiceController_getInvoice"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1.0/webhook/trbt": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Receive new subscription webhook from TRBT */
        post: operations["WebhookController_handleNewSubscription"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
}
export type webhooks = Record<string, never>;
export interface components {
    schemas: {
        AuthDataDto: {
            /** @description Telegram initData */
            data: string;
        };
        AuthTokensDto: {
            /**
             * @description Access token (JWT) for authentication
             * @example eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...
             */
            accessToken: string;
            /**
             * @description Hashed refresh token (JWT) for renewing access tokens
             * @example eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...
             */
            refreshToken: string;
        };
        RefreshTokenDto: {
            /** @description refresh token */
            refreshToken: string;
        };
        CustomerSubscriptionResponseDto: {
            /** @description Internal subscription ID (UUID) */
            id: string;
            /**
             * @description Current subscription status
             * @example active
             * @enum {string}
             */
            status: "active" | "expired" | "none";
            /** @description Start date of the subscription (if active) */
            startDate: string | null;
            /** @description End date of the subscription (if active) */
            endDate: string | null;
            /**
             * @description How the subscription was created (e.g. paid, trial, bonus)
             * @example trial
             * @enum {string|null}
             */
            createdVia: "paid" | "bonus" | "trial" | null;
            /** @description Manual VPN subscription URL (e.g. vmess://...) */
            subscriptionUrl: Record<string, never> | null;
            /**
             * @description Whether the free trial was already activated
             * @example false
             */
            trialActivated: boolean;
            /** @description Timestamp when subscription was created */
            createdAt: string;
            /** @description Timestamp of last subscription update */
            updatedAt: string;
        };
        CustomerResponseDto: {
            /** @description Internal customer ID (UUID) */
            id: string;
            /** @description Telegram user ID (numeric) */
            telegramId: number;
            /** @description Telegram username (if available) */
            username: Record<string, never> | null;
            /** @description User language code, e.g. "en" or "ru" */
            language: string;
            /** @description ID of the referrer (if any) */
            referredById: Record<string, never> | null;
            /** @description Unclaimed bonus days from referrals or promotions */
            unclaimedBonusDays: number;
            /**
             * Format: date-time
             * @description Customer registration timestamp
             */
            createdAt: string;
            /**
             * Format: date-time
             * @description Last update timestamp of the customer record
             */
            updatedAt: string;
            /** @description Customer subscription info (if exists) */
            customerSubscription: components["schemas"]["CustomerSubscriptionResponseDto"] | null;
        };
        SubscriptionPurchasedMetaDto: {
            /**
             * @description Subscription period in days
             * @example 30
             */
            period: number;
            /**
             * @description Payment platform used for the purchase
             * @example telegram_stars
             * @enum {string}
             */
            platform: "telegram_stars" | "trbt";
            /**
             * @description Amount paid in minor currency units
             * @example 10100
             */
            amount?: number;
            /**
             * @description New subscription end date (ISO string)
             * @example 2025-09-17T12:00:00Z
             */
            newEndDate?: string;
        };
        SubscriptionExtendedMetaDto: {
            /**
             * @description Days added to current subscription
             * @example 30
             */
            daysAdded: number;
            /**
             * @description Payment platform
             * @example telegram_stars
             * @enum {string}
             */
            platform?: "telegram_stars" | "trbt";
            /**
             * @description Amount paid in minor currency units
             * @example 10100
             */
            amount?: number;
            /**
             * @description Previous subscription end date (ISO string)
             * @example 2025-09-10T12:00:00Z
             */
            previousEndDate?: string;
            /**
             * @description New subscription end date (ISO string)
             * @example 2025-10-10T12:00:00Z
             */
            newEndDate?: string;
        };
        SubscriptionExpiredMetaDto: {
            /**
             * @description Дата окончания подписки
             * @example 2025-09-10T12:00:00Z
             */
            expiredAt: string;
        };
        BonusClaimedMetaDto: {
            /**
             * @description Days moved from bonus bank to subscription
             * @example 7
             */
            days: number;
            /** @example 2025-09-10T12:00:00Z */
            previousEndDate?: string;
            /** @example 2025-09-17T12:00:00Z */
            newEndDate?: string;
        };
        TrialActivatedMetaDto: {
            /** @example 3 */
            grantedDays: number;
        };
        ReferralBonusAddedMetaDto: {
            /**
             * @description Days added to bonus bank
             * @example 7
             */
            days: number;
            /**
             * @description Referee Telegram ID
             * @example 944276139
             */
            refereeTelegramId?: string;
            /** @example payment_abc123 */
            sourcePaymentId?: string;
        };
        ActivityLogDto: {
            /** @example f7d5c79a-... */
            id: string;
            /** @example 9f2a6a1e-... */
            customerId: string;
            /**
             * @example purchased
             * @enum {string}
             */
            type: "subscription_purchased" | "subscription_extended" | "subscription_expired" | "trial_activated" | "bonus_claimed" | "referral_bonus_added";
            /** @description Event-specific metadata. Shape depends on "type". */
            meta: components["schemas"]["SubscriptionPurchasedMetaDto"] | components["schemas"]["SubscriptionExtendedMetaDto"] | components["schemas"]["SubscriptionExpiredMetaDto"] | components["schemas"]["BonusClaimedMetaDto"] | components["schemas"]["TrialActivatedMetaDto"] | components["schemas"]["ReferralBonusAddedMetaDto"];
            /** @example 2025-08-08T10:22:33.214Z */
            createdAt: string;
        };
        TariffDto: {
            /**
             * @description Unique code of the tariff plan (e.g. monthly, quarterly, halfyear)
             * @example monthly
             */
            code: string;
            /**
             * @description Duration of the plan in months
             * @example 1
             */
            months: number;
            /**
             * @description Current price of the plan in Russian rubles
             * @example 200
             */
            priceRUB: number;
            /**
             * @description Current price of the plan in Telegram Stars
             * @example 230
             */
            priceStars: number;
            /**
             * @description Old price in rubles (for discounts), null if no discount
             * @example 600
             */
            priceOldRUB: Record<string, never> | null;
            /**
             * @description Old price in Telegram Stars (for discounts), null if no discount
             * @example 690
             */
            priceOldStars: Record<string, never> | null;
            /**
             * @description Discount percentage, null or 0 if no discount
             * @example 15
             */
            discount: Record<string, never> | null;
            /**
             * @description TRBT code of the tariff plan
             * @example sz9u
             */
            trbtCode: Record<string, never>;
            /**
             * @description Actual price per month for this plan
             * @example 200
             */
            perMonth: number;
        };
        ReferredDto: {
            /** @description Telegram ID of the referred user (stringified BigInt) */
            telegramId: string;
            /** @description Telegram username of the referred user */
            username: string | null;
        };
        ReferralDto: {
            /** @description Referral record ID (UUID) */
            id: string;
            /**
             * @description Current status of the referral
             * @enum {string}
             */
            status: "inactive" | "trial" | "purchased";
            /**
             * Format: date-time
             * @description Date when the referral was created
             */
            createdAt: string;
            /**
             * Format: date-time
             * @description Date when the referral was last updated
             */
            updatedAt: string;
            /** @description Information about the referred user */
            referred: components["schemas"]["ReferredDto"];
        };
        InvoiceUrlDto: {
            /**
             * @description Direct payment URL for Telegram Stars invoice
             * @example https://t.me/...
             */
            url: string;
        };
        WebhookResponseDto: {
            /**
             * @description Webhook processed successfully
             * @example ok
             */
            status: string;
        };
    };
    responses: never;
    parameters: never;
    requestBodies: never;
    headers: never;
    pathItems: never;
}
export type $defs = Record<string, never>;
export interface operations {
    AuthController_authUser: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Request body for TMA authorization */
        requestBody: {
            content: {
                "application/json": components["schemas"]["AuthDataDto"];
            };
        };
        responses: {
            /** @description Tokens issued */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["AuthTokensDto"];
                };
            };
            /** @description Telegram initData is missing */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Invalid Telegram initData */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Failed to find or create user */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    AuthController_refreshToken: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Request body for token refresh */
        requestBody: {
            content: {
                "application/json": components["schemas"]["RefreshTokenDto"];
            };
        };
        responses: {
            /** @description Tokens refreshed */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["AuthTokensDto"];
                };
            };
            /** @description Invalid refresh token format */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Invalid or expired refresh token */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    CustomerController_getProfile: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Данные пользователя */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["CustomerResponseDto"];
                };
            };
            /** @description Неавторизованный доступ */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    CustomerController_activateTrial: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Trial activated */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["CustomerResponseDto"];
                };
            };
            /** @description Trial already used */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    ActivityLogController_list: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ActivityLogDto"][];
                };
            };
        };
    };
    TariffController_getAllTariffs: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description List of tariff plans */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["TariffDto"][];
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    ReferralController_getMyReferrals: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ReferralDto"][];
                };
            };
        };
    };
    InvoiceController_getInvoice: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Unique tariff code (e.g., "quarterly") */
                code: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Direct payment URL for the selected tariff via Telegram Stars */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["InvoiceUrlDto"];
                };
            };
            /** @description Tariff not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    WebhookController_handleNewSubscription: {
        parameters: {
            query?: never;
            header: {
                "trbt-signature": string;
            };
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Webhook successfully processed */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["WebhookResponseDto"];
                };
            };
            /** @description Empty or invalid body */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Missing or invalid signature */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
}
